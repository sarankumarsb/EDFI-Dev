@using System.Web.Script.Serialization
@using EdFi.Dashboards.Common.Utilities
@using EdFi.Dashboards.Core.Providers.Context
@using EdFi.Dashboards.Resources.Navigation
@using EdFi.Dashboards.Resources.Navigation.Mvc
@using EdFi.Dashboards.Resources.Staff
@using EdFi.Dashboards.SecurityTokenService.Authentication
@model EdFi.Dashboards.Presentation.Core.Models.Shared.EdFiGridModel
@{
    Layout = null;
    var isMetricBasedWatchList = EdFiDashboardContext.Current.StudentListType == "MetricsBasedWatchList";
    var isStudentWatchList = EdFiDashboardContext.Current.StudentListType == "CustomStudentList";

    var localEducationAgencyId = EdFiDashboardContext.Current.LocalEducationAgencyId.GetValueOrDefault();
    var schoolId = EdFiDashboardContext.Current.SchoolId;
    var staffUSI = UserInformation.Current.StaffUSI;
    /*
     * The EdFiGridModel is created in many different locations and adding the version to all models would be likely break multiple 
     * extensions in subtle ways. Instead, we are adding it here so it is done consistently.
     * */
    var metadataVersion = IoC.Resolve<IListMetadataProvider>().GetMetadataVersion();
}
@{
    // if the student watch list model contains data then call the partial view
    if (Model.StudentWatchList != null)
    {
        Html.RenderPartial("EdFiGridMetricBasedWatchList", Model);
    }
}
<form id="@(Model.GridName)EdFiGridForm" action="@Model.ExportGridDataUrl" method="POST"></form>
<div id="@(Model.GridName)-EdFiGrid-outermost" style="width:inherit;" aria-hidden="true">
    <div id="@(Model.GridName)-EdFiGrid-no-data" class="EdFiGrid-no-data" style="display:none;">
        @if (isMetricBasedWatchList)
        {
            <div id="@(Model.GridName)-EdFiGrid-no-data-filter-list-container" style="margin-bottom: 10px">
                <a href="#" id="@(Model.GridName)-EdFiGrid-no-data-filter-list" class="EdFiGrid-interaction-menu-button EdFiGrid-filter-grid" onclick="@(Model.GridName)WatchList.open();@(Model.GridName)EdFiGrid.showStudentWatchListMenu();">SHOW DYNAMIC LIST</a>
            </div>
        }
        No data available.
    </div>
    <div id="@(Model.GridName)-EdFiGrid-IE7" class="EdFiGrid-no-data" style="display:none;">
        Internet Explorer 7 is not supported. If you are using a more current version of IE and are seeing this message, please turn off compatibility mode.
    </div>
    <div id="@(Model.GridName)-EdFiGrid-loading" class="EdFiGrid-loading">
        <div><img src="@(EdFiWebFormsDashboards.Site.Common.ThemeImage("loadingSmall.gif").Resolve())" alt="Loading data..." /> Loading data...</div>
    </div>
    <div id="@(Model.GridName)-EdFiGrid-processing" class="EdFiGrid-processing" style="display:none;">
        <div>Processing...</div>
    </div>
    <div id="@(Model.GridName)-EdFiGrid-processing-background" class="EdFiGrid-processing-background" style="display:none;">
    </div>
    
    <div id="@(Model.GridName)-EdFiGrid" class="EdFiGrid" style="display:none;">
        @if (Model.DisplayInteractionMenu)
        {
            <a href="#" id="@(Model.GridName)-EdFiGrid-interaction-open-menu-button" class="EdFiGrid-interaction-open-menu-button" onclick="@(Model.GridName)EdFiGrid.showInteractionMenu();  (event.preventDefault) ? event.preventDefault() : event.returnValue = false;">CUSTOMIZE VIEW</a>
            @if (Model.AllowMaximizeGrid)
            {
                <a href="#" id="@(Model.GridName)-EdFiGrid-interaction-open-submit-button" class="EdFiGrid-interaction-open-submit-button" onclick="@(Model.GridName)EdFiGrid.Submit2diffURL(); (event.preventDefault) ? event.preventDefault() : event.returnValue = false;">Submit to Intervention</a>
            }            
            <div id="@(Model.GridName)-EdFiGrid-interaction-menu" class="EdFiGrid-interaction-menu">
                <div id="@(Model.GridName)-EdFiGrid-interaction-submenu" class="EdFiGrid-interaction-submenu">
					<div id="@(Model.GridName)-EdFiGrid-interaction-standard"  class="EdFiGrid-interaction-standard">
						<div id="@(Model.GridName)-EdFiGrid-interaction-columns" class="EdFiGrid-interaction-columns">
							@if (Model.DisplayAddRemoveColumns)
							{
								<a href="#" id="@(Model.GridName)-EdFiGrid-change-columns" class="EdFiGrid-interaction-menu-button EdFiGrid-change-columns" onclick="@(Model.GridName)EdFiGrid.toggleHeaders(this);  (event.preventDefault) ? event.preventDefault() : event.returnValue = false;" title="Add or remove columns">SEE MORE DATA</a>
								<a href="#" id="@(Model.GridName)-EdFiGrid-save-columns" class="EdFiGrid-interaction-menu-button EdFiGrid-save-columns" style="display: none;" onclick="@(Model.GridName)EdFiGrid.hideInteractionMenu(null);@(Model.GridName)EdFiGrid.saveColumns(); (event.preventDefault) ? event.preventDefault() : event.returnValue = false;">SAVE COLUMNS</a>
								<a href="#" id="@(Model.GridName)-EdFiGrid-reset-columns" class="EdFiGrid-interaction-menu-button EdFiGrid-reset-columns" style="display: none;" onclick="@(Model.GridName)EdFiGrid.hideInteractionMenu(null);@(Model.GridName)EdFiGrid.resetColumns(); (event.preventDefault) ? event.preventDefault() : event.returnValue = false;">RESET COLUMNS</a>
								<a href="#" id="@(Model.GridName)-EdFiGrid-cancel-columns" class="EdFiGrid-interaction-menu-button EdFiGrid-cancel-columns" style="display: none;" onclick="@(Model.GridName)EdFiGrid.hideInteractionMenu(null);@(Model.GridName)EdFiGrid.finishColumns(); (event.preventDefault) ? event.preventDefault() : event.returnValue = false;">CANCEL</a>
							}
						</div>
						<div id="@(Model.GridName)-EdFiGrid-interaction-size-grid" class="EdFiGrid-interaction-size-grid">
							@if (Model.AllowMaximizeGrid)
							{
								<a href="#" id="@(Model.GridName)-EdFiGrid-maximize-grid" class="EdFiGrid-interaction-menu-button EdFiGrid-maximize-grid" onclick="@(Model.GridName)EdFiGrid.hideInteractionMenu(null);@(Model.GridName)EdFiGrid.toggleMaximizeGrid(); (event.preventDefault) ? event.preventDefault() : event.returnValue = false;">MAXIMIZE GRID</a>
								<a href="#" id="@(Model.GridName)-EdFiGrid-restore-grid" class="EdFiGrid-interaction-menu-button EdFiGrid-restore-grid" style="display: none;" onclick="@(Model.GridName)EdFiGrid.hideInteractionMenu(null);@(Model.GridName)EdFiGrid.toggleMaximizeGrid(); (event.preventDefault) ? event.preventDefault() : event.returnValue = false;">RESTORE GRID</a>
								if (Model.StudentWatchList != null)
								{
									if (!isStudentWatchList)
									{
										<a href="#" id="@(Model.GridName)-EdFiGrid-filter-list" class="EdFiGrid-interaction-menu-button EdFiGrid-filter-grid" onclick="@(Model.GridName)WatchList.open();@(Model.GridName)EdFiGrid.showStudentWatchListMenu();">@(isMetricBasedWatchList ? "SHOW DYNAMIC LIST" : "CREATE DYNAMIC LIST")</a>
										<a href="@(Model.StudentWatchList.WatchListSearchUrl)" id="@(Model.GridName)-EdFiGrid-search-filter-list" class="EdFiGrid-interaction-menu-button EdFiGrid-filter-grid">SHARED LIST SEARCH</a>
									}
								}
							}
						</div>
						<div id="@(Model.GridName)-EdFiGrid-interaction-student-watchlist" class="EdFiGrid-interaction-student-watchlist"></div>
					</div>
					<div id="@(Model.GridName)-EdFiGrid-interaction-custom" class="EdFiGrid-interaction-custom"></div>
                    <div id="@(Model.GridName)-EdFiGrid-interaction-custom2" class="EdFiGrid-interaction-custom EdFiGrid-interaction-custom2"></div>
                </div>
            </div>
                        if (Model.GridTable.Columns.Count > 0 && Model.GridTable.Columns[0].Children.Count == 0)
                        {
                <div id="@(Model.GridName)-EdFiGrid-interaction-menu-placeholder" class="EdFiGrid-interaction-menu-placeholder">&nbsp;</div>
                        }
        }
        <div id="@(Model.GridName)-EdFiGrid-grid-first-container" style="height:auto; width:inherit;">
            <div id="@(Model.GridName)-EdFiGrid-grid-container" class="EdFiGrid-grid-container">
                <div id="@(Model.GridName)-EdFiGrid-grid-table-container" class="EdFiGrid-grid-table-container">
                    <div id="@(Model.GridName)-EdFiGrid-fixed-top" class="EdFiGrid-fixed-top">
                        <div id="@(Model.GridName)-EdFiGrid-fixed" class="EdFiGrid-fixed">
                            <div id="@(Model.GridName)-EdFiGrid-fixed-header" class="EdFiGrid-fixed-header">
                                <table id="@(Model.GridName)-EdFiGrid-fixed-header-table" class="EdFiGrid-fixed-header-table" cellpadding="0" cellspacing="0" border="0">
                                </table>
                            </div><div id="@(Model.GridName)-EdFiGrid-scroll-header" class="EdFiGrid-scroll-header">
                                      <table id="@(Model.GridName)-EdFiGrid-scroll-header-table" class="EdFiGrid-scroll-header-table" cellpadding="0" cellspacing="0" border="0">
                                      </table>
                                  </div>
                        </div>
                    </div>
                    <div id="@(Model.GridName)-EdFiGrid-scroll-bottom" class="EdFiGrid-scroll-bottom">
                        <div id="@(Model.GridName)-EdFiGrid-scrollable" class="EdFiGrid-scrollable">
                            <div id="@(Model.GridName)-EdFiGrid-fixed-data" class="EdFiGrid-fixed-data">
                                <table id="@(Model.GridName)-EdFiGrid-fixed-data-table" class="EdFiGrid-fixed-data-table" cellpadding="0" cellspacing="0" border="0">
                                </table>
                                <div class="EdFiGrid-shim-bottom-placeholder">
                                </div>
                            </div><div id="@(Model.GridName)-EdFiGrid-scroll-data" class="EdFiGrid-scroll-data">
                                      <table id="@(Model.GridName)-EdFiGrid-scroll-data-table" class="EdFiGrid-scroll-data-table" cellpadding="0" cellspacing="0" border="0">
                                      </table>
                                      <div class="EdFiGrid-shim-bottom-placeholder">
                                      </div>
                                  </div>
                        </div>
                    </div>
                </div>
                <div id="@(Model.GridName)-EdFiGrid-shim-bottom" class="EdFiGrid-shim-bottom">
                    <div class="column-freezebar-extension">
                    </div>
                </div>
                <div id="@(Model.GridName)-EdFiGrid-shim-right" class="EdFiGrid-shim-right">
                    <div class="row-freezebar-extension">
                    </div>
                </div>
                <div id="@(Model.GridName)-EdFiGrid-scroll" class="EdFiGrid-scroll"  onscroll="@(Model.GridName)EdFiGrid.scrollData(this);">
                    <div id="@(Model.GridName)-EdFiGrid-scroll-size" class="EdFiGrid-scroll-size">
                    </div>
                </div>
            </div>
        </div>
        <div id="@(Model.GridName)-EdFiGrid-footer" class='EdFiGrid-footer'>
            <table id="@(Model.GridName)-EdFiGrid-footer-table" class='EdFiGrid-footer-table' cellpadding='0' cellspacing='0' border="0" >
            </table>
        </div>
        @Html.Partial("EdFiGridFooter", Model)
        <div id="@(Model.GridName)-EdFiGrid-tooltip-container">
        </div>
    </div>
    @if (Model.AllowMaximizeGrid)
    {
        <script type="text/javascript">
            function InitEdFiGridSettings() {if (window.sessionStorage) {  maximizedGrid = window.sessionStorage.getItem('EdFiGridMaximized');}}; // override the default clear method
        </script>
    }
    <script type="text/javascript">
        var maximizedGrid = false;
        var @(Model.GridName)EdFiGrid = new edfiGrid('@(Model.GridName)', '@(Model.UniqueTableName)', @(Model.SizeToWindow.ToString().ToLower()), @(Model.FixedHeight));
        @{
            var jss = new JavaScriptSerializer { MaxJsonLength = 50000000 };
            var jsonObjects = jss.Serialize(Model.GridTable);
            var entityIds = jss.Serialize(Model.GridTable.EntityIds);
            var nonPersistedSettings = "null";
            if (!String.IsNullOrEmpty(Model.HrefToUse) && !String.IsNullOrEmpty(Model.NonPersistedSettings) && Model.NonPersistedSettings != "null")
            {
                nonPersistedSettings = Model.NonPersistedSettings.Substring(0, Model.NonPersistedSettings.Length - 2) + String.Format(", templateOptions: {{ hrefToUse: '{0}' }}", Model.HrefToUse) + "}";
            }
            else if (!String.IsNullOrEmpty(Model.HrefToUse))
            {
                nonPersistedSettings = String.Format("{{ templateOptions: {{ hrefToUse: '{0}' }} }}", Model.HrefToUse);
            }
            else if (!String.IsNullOrEmpty(Model.NonPersistedSettings))
            {
                nonPersistedSettings = Model.NonPersistedSettings;
            }

            var entityListParameters = String.Empty;
            if (Model.EntityList != null)
            {
                entityListParameters = String.Format("{0}, '{1}', '{2}',", Model.EntityList.RowIndexForId, Model.EntityList.MetricVariantId, Model.EntityList.ListType);
            }
        }
        jQuery['@(Model.GridName)-GridData'] = @(Html.Raw(jsonObjects));

        $(document).ready(function () {
            //Bind to the event...
            //@(Model.SelectedDemographicOption)
            if ('@entityListParameters' != '' && '@(Model.UsePagination)' == 'False') {
                $('#@(Model.GridName)-EdFiGrid').bind('afterDrawEvent', function(e, table) {
                    createEntityListCookieWithExtraParametersForTemplatedList('@(Model.GridName)-GridData', @(Html.Raw(entityListParameters)) '@(EdFiDashboards.Site.Common.EdFiGridWebService_SetSessionObject(EdFiDashboardContext.Current.LocalEducationAgencyId.GetValueOrDefault()).Resolve())');
                });
            }
            
            if (maximizedGrid === "true") {
                @(Model.GridName)EdFiGrid.maximizeGrid();
            } 
            
            //Select the object where we are going to add the data and create the table
            @(Model.GridName)EdFiGrid.initialize(
                {
                    version : '@metadataVersion',
                    columnToSort: @Model.DefaultSortColumn,
                    secondarySortColumnNumber: @Model.DefaultSortColumn,
                    pageSize: 20,
                    usePersistedColumnData: @(Model.UsePersistedColumnData.ToString().ToLower())
                },
                @Html.Raw(nonPersistedSettings),
                {
                    UseServerSidePaging: @(Model.UsePagination ? 1 : 0),
                    PaginationCallbackUrl: '@Model.PaginationCallbackUrl'
                },
                {
                    EntityIds: @Html.Raw(entityIds),
                    StudentWatchListData: 'undefined' !== typeof @(Model.GridName)WatchList ? JSON.parse(@(Model.GridName)WatchList.WatchListModel.SelectedValuesJson) : null
                },
                {
                    ExportGridDataUrl: '@Model.ExportGridDataUrl',
                    LocalEducationAgencyId: @localEducationAgencyId,
                    SchoolId: @(schoolId.HasValue?schoolId.ToString():"null"),
                    StaffUSI: @staffUSI
                }
            );
            if ('@Model.SelectedDemographicOption' != '') {
                @(Model.GridName)EdFiGrid.setSelectedDemographic('@Model.SelectedDemographicOption');
            }
            if ('@(Model.SelectedSchoolCategoryOption)' != '') {
                @(Model.GridName)EdFiGrid.setSelectedLevel('@(Model.SelectedSchoolCategoryOption)');
            }
            if ('@(Model.SelectedGradeOption)' != '') {
                @(Model.GridName)EdFiGrid.setSelectedGrade('@(Model.SelectedGradeOption)');
            }
            if ('@Model.PreviousNextSessionPage' != '') {
                @(Model.GridName)EdFiGrid.setPreviousNextSessionPage('@Model.PreviousNextSessionPage');
            }
            if ('@Model.ListType.ToString()' != '') {
                @(Model.GridName)EdFiGrid.setPageListType('@Model.ListType.ToString()');
            }

            //$('#scrollDataCellDiv').scroll(scrollData);
            $(window).resize(function() { var holdGrid =  @(Model.GridName)EdFiGrid;
                holdGrid.resize(); });
            $(window).onorientationchange = function() { var holdGrid =  @(Model.GridName)EdFiGrid;
                holdGrid.resize(); };
                
            $("#@(Model.GridName)-EdFiGrid-interaction-menu").click(@(Model.GridName)EdFiGrid.hideInteractionMenu);
        });
        
    </script>
</div>
