#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18034
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EdFi.Dashboards.Presentation.Core.Views.MetricTemplates.Shared
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Linq;
    using System.Net;
    using System.Text;
    using System.Web;
    using System.Web.Helpers;
    using System.Web.Mvc;
    using System.Web.Mvc.Ajax;
    using System.Web.Mvc.Html;
    using System.Web.Routing;
    using System.Web.Security;
    using System.Web.UI;
    using System.Web.WebPages;
    using EdFi.Dashboards.Metric.Resources.Models;
    using EdFi.Dashboards.Presentation.Architecture.Mvc.Extensions;
    using EdFi.Dashboards.Presentation.Web.Utilities;
    using EdFi.Dashboards.Resources.Navigation;
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("RazorGenerator", "1.5.0.0")]
    [System.Web.WebPages.PageVirtualPathAttribute("~/Views/MetricTemplates/Shared/AggregateSummary.cshtml")]
    public class AggregateSummary : System.Web.Mvc.WebViewPage<AggregateMetric>
    {
        public AggregateSummary()
        {
        }
        public override void Execute()
        {

WriteLiteral("\r\n");


            
            #line 3 "..\..\Views\MetricTemplates\Shared\AggregateSummary.cshtml"
  
    var includedStates = new[] {
                                 MetricStateType.VeryGood,
                                 MetricStateType.Good,
                                 MetricStateType.Acceptable,
                                 MetricStateType.Low,
                                 MetricStateType.VeryLow
                             };
    var granularMetricCount =
    (from m in Model.Descendants
     where m.MetricType == MetricType.GranularMetric
     let gm = m as IGranularMetric
     where includedStates.Contains(gm.State.StateType)
            && gm.MetricVariantType == MetricVariantType.CurrentYear
     select gm).Count();

    var lowGranularMetricCount =
   (from m in Model.Descendants
    where m.MetricType == MetricType.GranularMetric
    let gm = m as IGranularMetric
    where (gm.State.StateType == MetricStateType.Low || gm.State.StateType == MetricStateType.VeryLow)
            && gm.MetricVariantType == MetricVariantType.CurrentYear
    select gm).Count();


            
            #line default
            #line hidden
WriteLiteral("\n");


            
            #line 28 "..\..\Views\MetricTemplates\Shared\AggregateSummary.cshtml"
 if (granularMetricCount > 0) {

            
            #line default
            #line hidden
WriteLiteral("    <span class=\"aggregate-summary\">\r\n");


            
            #line 30 "..\..\Views\MetricTemplates\Shared\AggregateSummary.cshtml"
         if (lowGranularMetricCount > 0) {
            var goalsMet = granularMetricCount - lowGranularMetricCount;

            
            #line default
            #line hidden
WriteLiteral("            ");

WriteLiteral("<em>");


            
            #line 32 "..\..\Views\MetricTemplates\Shared\AggregateSummary.cshtml"
                 Write(goalsMet);

            
            #line default
            #line hidden
WriteLiteral("</em> of <em>");


            
            #line 32 "..\..\Views\MetricTemplates\Shared\AggregateSummary.cshtml"
                                       Write(granularMetricCount);

            
            #line default
            #line hidden
WriteLiteral("</em> metric");


            
            #line 32 "..\..\Views\MetricTemplates\Shared\AggregateSummary.cshtml"
                                                                        Write(granularMetricCount == 1 ? string.Empty : "s");

            
            #line default
            #line hidden
WriteLiteral(" met goal");

WriteLiteral("\r\n");

            
            
            #line 33 "..\..\Views\MetricTemplates\Shared\AggregateSummary.cshtml"
        } else {

            
            #line default
            #line hidden
WriteLiteral("            ");

WriteLiteral("<em>");

            
            
            #line 34 "..\..\Views\MetricTemplates\Shared\AggregateSummary.cshtml"
                 Write(granularMetricCount);

            
            #line default
            #line hidden
WriteLiteral("</em> metric");


            
            #line 34 "..\..\Views\MetricTemplates\Shared\AggregateSummary.cshtml"
                                                  Write(granularMetricCount == 1 ? string.Empty : "s");

            
            #line default
            #line hidden
WriteLiteral(" met goal");

WriteLiteral("\r\n");

            
            
            #line 35 "..\..\Views\MetricTemplates\Shared\AggregateSummary.cshtml"
        }

            
            #line default
            #line hidden
WriteLiteral("    </span>\r\n");


            
            #line 37 "..\..\Views\MetricTemplates\Shared\AggregateSummary.cshtml"
}
            
            #line default
            #line hidden

        }
    }
}
#pragma warning restore 1591
