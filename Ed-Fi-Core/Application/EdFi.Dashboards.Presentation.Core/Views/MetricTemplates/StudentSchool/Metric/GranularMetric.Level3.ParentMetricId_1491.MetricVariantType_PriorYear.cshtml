@model IGranularMetric
<tr id="vMetric@(Model.MetricVariantId)" data-metric-id="@(Model.MetricId)" data-metric-variant-id="@(Model.MetricVariantId)" class="PriorYearRow">
    <td headers="MetricName@(this.GetMetricRenderingContextValue("ParentContainerMetricId"))" data-item-type="DisplayName" title="@Model.ToolTip">
        <p class="arrow">
            <i class="icon-right"></i>
            <a name="m@(Model.MetricVariantId)"></a>
            <span class="metricId">@(Model.MetricId)-@(Model.MetricVariantType)</span>
            @(Model.DisplayName)
            @if (!String.IsNullOrWhiteSpace(Model.Context))
            {
                <span>&nbsp;(@Model.Context)</span>
            }
            @Html.Partial("MetricFootnoteLabelSuperText", Model.Footnotes)
                
            @Html.Partial("UnderConstruction", (MetricBase)Model)
        </p>
    </td>
    <td headers="MetricValue@(this.GetMetricRenderingContextValue("ParentContainerMetricId"))" data-item-type="State">
        @Html.Partial("StatusLabel", Model.State, new ViewDataDictionary { { "DisplayText", Model.DisplayValue } })
    </td>
    <td headers="MetricTrend@(this.GetMetricRenderingContextValue("ParentContainerMetricId"))" data-item-type="Trend">
        @Html.Partial("Trend", Model.Trend)
    </td>
    <td headers="MetricGoal@(this.GetMetricRenderingContextValue("ParentContainerMetricId"))" data-item-type="CampusGoal">
        @if (Model.Value != null)
        {
            @Model.Values["DisplayGoal"]
        }
    </td>
    <td headers="MetricDifferenceFromGoal@(this.GetMetricRenderingContextValue("ParentContainerMetricId"))" data-item-type="DifferenceFromGoal" class="@(Legacy.DifferenceFromGoalClass(Model.Values["GoalDifference"]))">
        @Model.Values["DisplayGoalDifference"]
    </td>
    <td headers="MetricDetails@(this.GetMetricRenderingContextValue("ParentContainerMetricId"))" data-item-type="ContextMenu">
        @Html.Partial("ContextMenu", (MetricBase)Model)
    </td>
</tr>
@if(Model.Components != null && Model.Components.Count > 0)
{
    var idx = 0;
    foreach (var component in @Model.Components)
    {
        <tr id="vMetricComponent@(Model.MetricVariantId)-@(idx)"  data-metric-id="@(Model.MetricId)" data-metric-variant-id="@(Model.MetricVariantId)">
            <td headers="MetricName@(this.GetMetricRenderingContextValue("ParentContainerMetricId"))" data-item-type="DisplayName" title="@Model.ToolTip">
                <p class="arrow">
                    <i class="icon-blank"></i>
                    @(component.Name)
                </p>
            </td>
            <td headers="MetricValue@(this.GetMetricRenderingContextValue("ParentContainerMetricId"))" data-item-type="State">
                @Html.Partial("MetricStateTypeLabel", component.MetricStateType, new ViewDataDictionary { { "DisplayText", component.Value } })
            </td>
            <td headers="MetricTrend@(this.GetMetricRenderingContextValue("ParentContainerMetricId"))" data-item-type="Trend">
            </td>
             <td headers="MetricGoal@(this.GetMetricRenderingContextValue("ParentContainerMetricId"))" data-item-type="CampusGoal">
                @if (Model.Value != null)
                {
                    @Model.Values["DisplayGoal"]
                }
            </td>
            <td headers="MetricDifferenceFromGoal@(this.GetMetricRenderingContextValue("ParentContainerMetricId"))" data-item-type="DifferenceFromGoal" class="@(Legacy.DifferenceFromGoalClass(Model.Values["GoalDifference"]))">
                @Model.Values["DisplayGoalDifference"]
            </td>
            <td headers="MetricDetails@(this.GetMetricRenderingContextValue("ParentContainerMetricId"))" data-item-type="ContextMenu">
            </td>
        </tr>
        idx++;
    }
}